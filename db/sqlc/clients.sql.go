// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: clients.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bindClientCategories = `-- name: BindClientCategories :exec
INSERT INTO client_categories(
    client_id, category_id
) VALUES (
    $1, unnest($2::uuid[])
)
`

type BindClientCategoriesParams struct {
	ClientID    pgtype.UUID   `json:"client_id"`
	CategoryIds []pgtype.UUID `json:"category_ids"`
}

func (q *Queries) BindClientCategories(ctx context.Context, arg BindClientCategoriesParams) error {
	_, err := q.db.Exec(ctx, bindClientCategories, arg.ClientID, arg.CategoryIds)
	return err
}

const getClientByID = `-- name: GetClientByID :one
SELECT
    cl.id, cl.name, cl.phone, cl.email, cl.age, cl.city, cl.address, cl.description, cl.circumstances, cl.image_url, cl.created_at, cl.updated_at,
    jsonb_agg(jsonb_build_object(
        'id', ct.id,
        'name', ct.name
    )) as categories
FROM
    clients cl
JOIN
    client_categories cl_ct on cl.id = cl_ct.client_id
JOIN
    categories ct on cl_ct.category_id = ct.id
WHERE
    cl.id = $1
GROUP BY
    cl.id
LIMIT 1
`

type GetClientByIDRow struct {
	ID            pgtype.UUID      `json:"id"`
	Name          pgtype.Text      `json:"name"`
	Phone         pgtype.Text      `json:"phone"`
	Email         pgtype.Text      `json:"email"`
	Age           pgtype.Numeric   `json:"age"`
	City          pgtype.Text      `json:"city"`
	Address       pgtype.Text      `json:"address"`
	Description   pgtype.Text      `json:"description"`
	Circumstances pgtype.Text      `json:"circumstances"`
	ImageUrl      pgtype.Text      `json:"image_url"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Categories    []byte           `json:"categories"`
}

func (q *Queries) GetClientByID(ctx context.Context, id pgtype.UUID) (GetClientByIDRow, error) {
	row := q.db.QueryRow(ctx, getClientByID, id)
	var i GetClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Age,
		&i.City,
		&i.Address,
		&i.Description,
		&i.Circumstances,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Categories,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT
    cl.id, cl.name, cl.phone, cl.email, cl.age, cl.city, cl.address, cl.description, cl.circumstances, cl.image_url, cl.created_at, cl.updated_at,
    jsonb_agg(jsonb_build_object(
        'id', ct.id,
        'name', ct.name
    )) as categories
FROM
    clients cl
JOIN
    client_categories cl_ct on cl.id = cl_ct.client_id
JOIN
    categories ct on cl_ct.category_id = ct.id
GROUP BY
    cl.id
ORDER BY
    cl.created_at DESC
`

type ListClientsRow struct {
	ID            pgtype.UUID      `json:"id"`
	Name          pgtype.Text      `json:"name"`
	Phone         pgtype.Text      `json:"phone"`
	Email         pgtype.Text      `json:"email"`
	Age           pgtype.Numeric   `json:"age"`
	City          pgtype.Text      `json:"city"`
	Address       pgtype.Text      `json:"address"`
	Description   pgtype.Text      `json:"description"`
	Circumstances pgtype.Text      `json:"circumstances"`
	ImageUrl      pgtype.Text      `json:"image_url"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Categories    []byte           `json:"categories"`
}

func (q *Queries) ListClients(ctx context.Context) ([]ListClientsRow, error) {
	rows, err := q.db.Query(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClientsRow{}
	for rows.Next() {
		var i ListClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Age,
			&i.City,
			&i.Address,
			&i.Description,
			&i.Circumstances,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Categories,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveClient = `-- name: SaveClient :one
INSERT INTO clients(
    name, phone, email, age, city, address, description, circumstances, image_url
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, phone, email, age, city, address, description, circumstances, image_url, created_at, updated_at
`

type SaveClientParams struct {
	Name          pgtype.Text    `json:"name"`
	Phone         pgtype.Text    `json:"phone"`
	Email         pgtype.Text    `json:"email"`
	Age           pgtype.Numeric `json:"age"`
	City          pgtype.Text    `json:"city"`
	Address       pgtype.Text    `json:"address"`
	Description   pgtype.Text    `json:"description"`
	Circumstances pgtype.Text    `json:"circumstances"`
	ImageUrl      pgtype.Text    `json:"image_url"`
}

func (q *Queries) SaveClient(ctx context.Context, arg SaveClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, saveClient,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Age,
		arg.City,
		arg.Address,
		arg.Description,
		arg.Circumstances,
		arg.ImageUrl,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Age,
		&i.City,
		&i.Address,
		&i.Description,
		&i.Circumstances,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveClientCategories = `-- name: SaveClientCategories :many
INSERT INTO categories(
    name
) VALUES (
    unnest($1::text[])
) ON CONFLICT DO NOTHING
RETURNING id, name
`

func (q *Queries) SaveClientCategories(ctx context.Context, names []string) ([]Category, error) {
	rows, err := q.db.Query(ctx, saveClientCategories, names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
