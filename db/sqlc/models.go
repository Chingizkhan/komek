// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountStatus string

const (
	AccountStatusActive  AccountStatus = "active"
	AccountStatusBlocked AccountStatus = "blocked"
	AccountStatusClosed  AccountStatus = "closed"
)

func (e *AccountStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountStatus(s)
	case string:
		*e = AccountStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountStatus: %T", src)
	}
	return nil
}

type NullAccountStatus struct {
	AccountStatus AccountStatus `json:"account_status"`
	Valid         bool          `json:"valid"` // Valid is true if AccountStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountStatus), nil
}

type OperationType string

const (
	OperationTypeRefill     OperationType = "refill"
	OperationTypeWithdraw   OperationType = "withdraw"
	OperationTypeHold       OperationType = "hold"
	OperationTypeClear      OperationType = "clear"
	OperationTypeCommission OperationType = "commission"
)

func (e *OperationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationType(s)
	case string:
		*e = OperationType(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationType: %T", src)
	}
	return nil
}

type NullOperationType struct {
	OperationType OperationType `json:"operation_type"`
	Valid         bool          `json:"valid"` // Valid is true if OperationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationType) Scan(value interface{}) error {
	if value == nil {
		ns.OperationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationType), nil
}

type Account struct {
	ID          pgtype.UUID      `json:"id"`
	Owner       pgtype.UUID      `json:"owner"`
	Balance     int64            `json:"balance"`
	HoldBalance int64            `json:"hold_balance"`
	Country     string           `json:"country"`
	Currency    string           `json:"currency"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Status      AccountStatus    `json:"status"`
}

type Client struct {
	ID            pgtype.UUID      `json:"id"`
	Name          pgtype.Text      `json:"name"`
	Phone         pgtype.Text      `json:"phone"`
	Email         pgtype.Text      `json:"email"`
	Age           pgtype.Numeric   `json:"age"`
	City          pgtype.Text      `json:"city"`
	Address       pgtype.Text      `json:"address"`
	Description   pgtype.Text      `json:"description"`
	Circumstances pgtype.Text      `json:"circumstances"`
	ImageUrl      pgtype.Text      `json:"image_url"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

type ClientCategory struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type ClientCategoryMap struct {
	ClientID   pgtype.UUID `json:"client_id"`
	CategoryID pgtype.UUID `json:"category_id"`
}

type Fundraise struct {
	ID                 pgtype.UUID      `json:"id"`
	Type               pgtype.UUID      `json:"type"`
	Goal               int64            `json:"goal"`
	Collected          int64            `json:"collected"`
	AccountID          pgtype.UUID      `json:"account_id"`
	IsActive           pgtype.Bool      `json:"is_active"`
	SupportersQuantity int64            `json:"supporters_quantity"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

type FundraiseType struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type Operation struct {
	ID            pgtype.UUID      `json:"id"`
	TransactionID pgtype.UUID      `json:"transaction_id"`
	AccountID     pgtype.UUID      `json:"account_id"`
	Type          OperationType    `json:"type"`
	Amount        int64            `json:"amount"`
	BalanceBefore int64            `json:"balance_before"`
	BalanceAfter  int64            `json:"balance_after"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

type Organisation struct {
	ID        pgtype.UUID      `json:"id"`
	Name      string           `json:"name"`
	Bin       string           `json:"bin"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Session struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	UserAgent    string             `json:"user_agent"`
	ClientIp     string             `json:"client_ip"`
	IsBlocked    bool               `json:"is_blocked"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Transaction struct {
	ID            pgtype.UUID      `json:"id"`
	FromAccountID pgtype.UUID      `json:"from_account_id"`
	ToAccountID   pgtype.UUID      `json:"to_account_id"`
	Amount        int64            `json:"amount"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID                pgtype.UUID      `json:"id"`
	Name              pgtype.Text      `json:"name"`
	Login             pgtype.Text      `json:"login"`
	Email             pgtype.Text      `json:"email"`
	EmailVerified     pgtype.Bool      `json:"email_verified"`
	PasswordHash      string           `json:"password_hash"`
	Phone             pgtype.Text      `json:"phone"`
	Roles             string           `json:"roles"`
	PasswordChangedAt pgtype.Timestamp `json:"password_changed_at"`
	CreatedAt         pgtype.Timestamp `json:"created_at"`
	UpdatedAt         pgtype.Timestamp `json:"updated_at"`
}
