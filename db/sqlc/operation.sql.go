// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: operation.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOperation = `-- name: CreateOperation :one
INSERT INTO operation(
    transaction_id, account_id, type, amount, balance_before, balance_after
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, transaction_id, account_id, type, amount, balance_before, balance_after, created_at
`

type CreateOperationParams struct {
	TransactionID pgtype.UUID   `json:"transaction_id"`
	AccountID     pgtype.UUID   `json:"account_id"`
	Type          OperationType `json:"type"`
	Amount        int64         `json:"amount"`
	BalanceBefore int64         `json:"balance_before"`
	BalanceAfter  int64         `json:"balance_after"`
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) (Operation, error) {
	row := q.db.QueryRow(ctx, createOperation,
		arg.TransactionID,
		arg.AccountID,
		arg.Type,
		arg.Amount,
		arg.BalanceBefore,
		arg.BalanceAfter,
	)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.AccountID,
		&i.Type,
		&i.Amount,
		&i.BalanceBefore,
		&i.BalanceAfter,
		&i.CreatedAt,
	)
	return i, err
}

const getOperationsByTransactionID = `-- name: GetOperationsByTransactionID :many

SELECT id, transaction_id, account_id, type, amount, balance_before, balance_after, created_at
FROM operation
WHERE transaction_id = $1
ORDER BY created_at
`

// -- name: CreateEntry :one
// INSERT INTO entries(
//
//	account_id,
//	amount
//
// ) VALUES (
//
//	$1, $2
//
// )
// RETURNING *;
//
// -- name: GetEntry :one
// SELECT *
// FROM entries
// WHERE id = $1
// LIMIT 1;
//
// -- name: ListEntries :many
// SELECT *
// FROM entries
// ORDER BY id
// LIMIT $1
// OFFSET $2;
func (q *Queries) GetOperationsByTransactionID(ctx context.Context, transactionID pgtype.UUID) ([]Operation, error) {
	rows, err := q.db.Query(ctx, getOperationsByTransactionID, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operation{}
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.AccountID,
			&i.Type,
			&i.Amount,
			&i.BalanceBefore,
			&i.BalanceAfter,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
