// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organisation.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteOrganisation = `-- name: DeleteOrganisation :exec
DELETE FROM organisation
WHERE id = $1
`

func (q *Queries) DeleteOrganisation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganisation, id)
	return err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT id, name, bin, created_at, updated_at FROM organisation
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrganisation(ctx context.Context, id uuid.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, getOrganisation, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrganisation = `-- name: ListOrganisation :many
SELECT id, name, bin, created_at, updated_at FROM organisation
ORDER BY created_at DESC
`

func (q *Queries) ListOrganisation(ctx context.Context) ([]Organisation, error) {
	rows, err := q.db.Query(ctx, listOrganisation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organisation{}
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveOrganisation = `-- name: SaveOrganisation :exec
INSERT INTO organisation (
    name, bin
) VALUES (
     $1, $2
)
`

type SaveOrganisationParams struct {
	Name string `json:"name"`
	Bin  string `json:"bin"`
}

func (q *Queries) SaveOrganisation(ctx context.Context, arg SaveOrganisationParams) error {
	_, err := q.db.Exec(ctx, saveOrganisation, arg.Name, arg.Bin)
	return err
}

const updateOrganisationBin = `-- name: UpdateOrganisationBin :exec
UPDATE organisation
SET bin = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
`

type UpdateOrganisationBinParams struct {
	ID  uuid.UUID `json:"id"`
	Bin string    `json:"bin"`
}

func (q *Queries) UpdateOrganisationBin(ctx context.Context, arg UpdateOrganisationBinParams) error {
	_, err := q.db.Exec(ctx, updateOrganisationBin, arg.ID, arg.Bin)
	return err
}

const updateOrganisationName = `-- name: UpdateOrganisationName :exec
UPDATE organisation
SET name = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
`

type UpdateOrganisationNameParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateOrganisationName(ctx context.Context, arg UpdateOrganisationNameParams) error {
	_, err := q.db.Exec(ctx, updateOrganisationName, arg.ID, arg.Name)
	return err
}
