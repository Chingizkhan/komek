// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id, name, login, email, email_verified, password_hash, phone, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Login,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, login, email, email_verified, password_hash, phone, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Login,
			&i.Email,
			&i.EmailVerified,
			&i.PasswordHash,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUser = `-- name: RemoveUser :one
DELETE FROM users
WHERE id = $1
RETURNING id
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, removeUser, id)
	err := row.Scan(&id)
	return id, err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO users(
    name, login, email, password_hash, phone
) VALUES (
    $1, $2, $3, $4, $5
)
`

type SaveUserParams struct {
	Name         sql.NullString `json:"name"`
	Login        string         `json:"login"`
	Email        sql.NullString `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Phone        sql.NullString `json:"phone"`
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) error {
	_, err := q.db.Exec(ctx, saveUser,
		arg.Name,
		arg.Login,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID      `json:"id"`
	Email sql.NullString `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :one
UPDATE users
SET email_verified = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserEmailVerifiedParams struct {
	ID            uuid.UUID    `json:"id"`
	EmailVerified sql.NullBool `json:"email_verified"`
}

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserEmailVerified, arg.ID, arg.EmailVerified)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserLogin = `-- name: UpdateUserLogin :one
UPDATE users
SET login = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserLoginParams struct {
	ID    uuid.UUID `json:"id"`
	Login string    `json:"login"`
}

func (q *Queries) UpdateUserLogin(ctx context.Context, arg UpdateUserLoginParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserLogin, arg.ID, arg.Login)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET name = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserNameParams struct {
	ID   uuid.UUID      `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserName, arg.ID, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserPasswordHash = `-- name: UpdateUserPasswordHash :one
UPDATE users
SET password_hash = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserPasswordHashParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPasswordHash(ctx context.Context, arg UpdateUserPasswordHashParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordHash, arg.ID, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users
SET phone = $2,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserPhoneParams struct {
	ID    uuid.UUID      `json:"id"`
	Phone sql.NullString `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.ID, arg.Phone)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
