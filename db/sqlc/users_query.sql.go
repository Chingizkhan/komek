// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_query.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id, name, login, email, email_verified, password_hash, phone, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Login,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, login, email, email_verified, password_hash, phone, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Login,
			&i.Email,
			&i.EmailVerified,
			&i.PasswordHash,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUser = `-- name: RemoveUser :one
DELETE FROM users
WHERE id = $1
RETURNING id
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, removeUser, id)
	err := row.Scan(&id)
	return id, err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO users(
    name, login, email, password_hash, phone
) VALUES (
    $1, $2, $3, $4, $5
)
`

type SaveUserParams struct {
	Name         sql.NullString `json:"name"`
	Login        string         `json:"login"`
	Email        sql.NullString `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Phone        sql.NullString `json:"phone"`
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) error {
	_, err := q.db.Exec(ctx, saveUser,
		arg.Name,
		arg.Login,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
	)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    login = $3,
    email = $4,
    email_verified = $5,
    phone = $6,
    password_hash = $7,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = $1
RETURNING id
`

type UpdateUserParams struct {
	ID            uuid.UUID      `json:"id"`
	Name          sql.NullString `json:"name"`
	Login         string         `json:"login"`
	Email         sql.NullString `json:"email"`
	EmailVerified sql.NullBool   `json:"email_verified"`
	Phone         sql.NullString `json:"phone"`
	PasswordHash  string         `json:"password_hash"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Login,
		arg.Email,
		arg.EmailVerified,
		arg.Phone,
		arg.PasswordHash,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
