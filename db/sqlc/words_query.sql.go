// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: words_query.sql

package word_db

import (
	"context"

	"github.com/google/uuid"
)

const deleteWord = `-- name: DeleteWord :one
DELETE FROM words
WHERE value = $1 AND
    fk_user_id = $2
RETURNING value
`

type DeleteWordParams struct {
	Value    string        `json:"value"`
	FkUserID uuid.NullUUID `json:"fk_user_id"`
}

func (q *Queries) DeleteWord(ctx context.Context, arg DeleteWordParams) (string, error) {
	row := q.db.QueryRow(ctx, deleteWord, arg.Value, arg.FkUserID)
	var value string
	err := row.Scan(&value)
	return value, err
}

const getWord = `-- name: GetWord :one
SELECT fk_user_id, value, language, translation, created_at, updated_at FROM words
WHERE value = $1 AND
  fk_user_id = $2
LIMIT 1
`

type GetWordParams struct {
	Value    string        `json:"value"`
	FkUserID uuid.NullUUID `json:"fk_user_id"`
}

func (q *Queries) GetWord(ctx context.Context, arg GetWordParams) (Word, error) {
	row := q.db.QueryRow(ctx, getWord, arg.Value, arg.FkUserID)
	var i Word
	err := row.Scan(
		&i.FkUserID,
		&i.Value,
		&i.Language,
		&i.Translation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWords = `-- name: ListWords :many
SELECT fk_user_id, value, language, translation, created_at, updated_at FROM words
WHERE fk_user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWords(ctx context.Context, fkUserID uuid.NullUUID) ([]Word, error) {
	rows, err := q.db.Query(ctx, listWords, fkUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.FkUserID,
			&i.Value,
			&i.Language,
			&i.Translation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveWord = `-- name: SaveWord :exec
INSERT INTO words (
    fk_user_id, value, language, translation, created_at, updated_at
) VALUES (
     $1, $2, $3, $4, CURRENT_TIMESTAMP(6), CURRENT_TIMESTAMP(6)
)
`

type SaveWordParams struct {
	FkUserID    uuid.NullUUID `json:"fk_user_id"`
	Value       string        `json:"value"`
	Language    string        `json:"language"`
	Translation string        `json:"translation"`
}

func (q *Queries) SaveWord(ctx context.Context, arg SaveWordParams) error {
	_, err := q.db.Exec(ctx, saveWord,
		arg.FkUserID,
		arg.Value,
		arg.Language,
		arg.Translation,
	)
	return err
}

const updateWord = `-- name: UpdateWord :one
UPDATE words
SET value = $2,
    language = $3,
    translation = $4,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE value = $1 AND
    fk_user_id = $2
RETURNING value
`

type UpdateWordParams struct {
	Value       string `json:"value"`
	Value_2     string `json:"value_2"`
	Language    string `json:"language"`
	Translation string `json:"translation"`
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) (string, error) {
	row := q.db.QueryRow(ctx, updateWord,
		arg.Value,
		arg.Value_2,
		arg.Language,
		arg.Translation,
	)
	var value string
	err := row.Scan(&value)
	return value, err
}
